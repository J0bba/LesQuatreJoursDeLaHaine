D1
map token / doc dans lesquels ils sont

TODO :
Domaine
	entity
	value object
Services du domaine
	Methode de crawl (pas le crawler) genre une interface (call JSoup) :
		url -> list<url>
	Indexer : TF
		url -> Document
	RetroIndex
		Document -> void
	Request : IDF
		query, retroIndex à query -> liste de resultat

RetroIndex ~= Historique de documents 

NOT TODO :
Services externes
	algorithmes de traitement simples qui prennent en entrée des objets du
	domaine et qui sortent des objets du domaine (traitement métier)
	pas de sauvegarde en BDD ou autre
	pas de transaction

	serialize
	transaction
	
D2
TODO :
Spring initializr
@Configuration
@EnableAsync

on gere le cablage avec annotations 
instancier le cable dans notre class path
en XML on construit comme ca tout l'arbre de dépendance
autowire : injecter automatiquement

real todo :
injection par propriété : on cree l'objet vide et on cherche toutes les propriétés
auxquelles on peut mettre les valeurs, déduire le setter

scope {
	bean(TestService::class.java, TestServiceBlipImpl()) {
		before(TestService::pong, javaMethod() { ... }
	}
}
before -> à chaque appel de pong, avant ca fait "..."
Ex : logger

provider(Nested::class.java, Singleton(Nested(instanceOf(TestService::class.java))
~= bean(Nested(insanceOf(TestService::cass.java))

Scope : interface et implémentation
Provider

Exemple RetroIndex :
bean(RetroIndex::class.java, ...)
bean(RestServer(InstanceOf(RetroIndex::class)))

le scope demande scope(insanceOf(Bite::class))
le scope a une bibliothèque de provider
il va chercher le premier provider qui produit Bite
il retourne l'instance de .get() (singleton, prototype, ca doit marcher)

la classe définit l'interface provider -> Moussa
classes :
Classe du framework
Classe scope
interface provider
une implem pour les singleton

interface Framework {
	AddProvider(class);
	GetInstanceOf(class);
}

interface Scope {
	AddProvider();
}

interface Provider {
	
}

J3 :
PointCut

postCreate // avant d'envoyer l'instance
afterInvoke // methods
aroundInvoke
beforeInvoke
preDestroy

DynamicProxy

consumer : void func(obj)
supplier : obj func()
function : obj func(obj)
runnable : void func()